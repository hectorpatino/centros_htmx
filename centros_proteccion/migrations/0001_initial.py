# Generated by Django 4.1 on 2023-11-20 02:38

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Caracterizacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('activo', models.BooleanField(default=True, null=True)),
                ('mas_dos_sedes', models.BooleanField(default=False, null=True)),
                ('residentes_femeninos', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('mujeres_menores_59', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('mujeres_60_69', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('mujeres_70_79', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('mujeres_80_89', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('mujeres_90_99', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('mujeres_100_mas', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('hombres_menores_59', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('hombres_60_69', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('hombres_70_79', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('hombres_80_89', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('hombres_90_99', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('hombres_100_mas', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('residentes_masculinos', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('residentes_otros_generos', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('objeto', models.CharField(blank=True, help_text='Objeto del centro', max_length=50, null=True)),
                ('observacion', models.CharField(blank=True, max_length=50, null=True)),
                ('atencion_domiciliaria', models.BooleanField(default=False, help_text='El centro ofrece atención domiciliaria', null=True)),
                ('tele_asistencia', models.BooleanField(default=False, help_text='El centro ofrece tele asistencia', null=True)),
            ],
            options={
                'verbose_name': 'Caracterización Poblacional',
                'verbose_name_plural': 'Caracterización Poblacional',
            },
        ),
        migrations.CreateModel(
            name='CentroAtencion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('sede', models.CharField(max_length=250)),
                ('direccion', models.CharField(blank=True, max_length=250)),
                ('fecha_cierre', models.DateField(blank=True, null=True)),
                ('pagina_web', models.URLField(blank=True, null=True)),
                ('correo', models.EmailField(blank=True, max_length=254, null=True)),
                ('creado_pqr', models.BooleanField(blank=True, default=False, null=True)),
            ],
            options={
                'verbose_name': 'Centro atención',
                'verbose_name_plural': 'Centros de atención',
                'permissions': (('ver_centro_atencion', 'Puede ver el centro de atención'), ('crear_centro_atencion', 'Puede crear el centro de atención'), ('modificar_centro_atencion', 'Puede modificar el centro de atención'), ('eliminar_centro_atencion', 'Puede eliminar el centro de atención'), ('crear_centro_atencion_pqr', 'Puede crear el centro de atención desde el pqr')),
            },
        ),
        migrations.CreateModel(
            name='DActividadesFamiliares',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DAdministrador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DConceptoSanitario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DCondicion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DEnfoqueDiferencial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DExigencias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DFinanciamiento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DInstitucion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DModalidad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DProfesionalSalud',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DServicios',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DServiciosSalud',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DSubsidio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DTipoPersona',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Estandarizacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('max_value', models.DecimalField(decimal_places=2, default=0, max_digits=5, null=True)),
                ('semaforo', models.CharField(max_length=50)),
                ('nivel_riesgo', models.CharField(max_length=50)),
                ('observaciones', models.TextField()),
                ('concepto', models.TextField(null=True)),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('ver_estandarizacion', 'Puede ver la estandarización'), ('modificar_estandarizacion', 'Puede modificar la estandarización')),
            },
        ),
        migrations.CreateModel(
            name='Municipio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50)),
                ('codigo', models.CharField(max_length=5)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(null=True, srid=4326)),
                ('categoria', models.CharField(max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'municipio',
                'verbose_name_plural': 'municipios',
                'ordering': ('nombre',),
            },
        ),
        migrations.CreateModel(
            name='Provincia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50, unique=True)),
                ('geom', django.contrib.gis.db.models.fields.PolygonField(null=True, srid=4326)),
            ],
            options={
                'ordering': ('nombre',),
            },
        ),
        migrations.CreateModel(
            name='RazonSocial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('nit', models.CharField(max_length=20)),
                ('nombre', models.CharField(default='', max_length=250)),
            ],
            options={
                'verbose_name': 'Razon social',
                'verbose_name_plural': 'Razones Sociales',
                'permissions': (('ver_razon_social', 'Puede ver la razón social'), ('modificar_razon_social', 'Puede modificar la razón social'), ('crear_razon_social', 'Puede crear la razón social'), ('eliminar_razon_social', 'Puede eliminar la razón social')),
            },
        ),
        migrations.CreateModel(
            name='Red',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(null=True, srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='UsuarioMunicipio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('municipio', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='usuarios_municipio', to='centros_proteccion.municipio')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='usurio_centro', to=settings.AUTH_USER_MODEL)),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Usuario - Municipio',
                'verbose_name_plural': 'Usuarios - Municipios',
            },
        ),
        migrations.CreateModel(
            name='TipoPersonaRazonSocial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('razon_social', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, related_name='tipos_persona', to='centros_proteccion.razonsocial', verbose_name='razon social')),
                ('tipo_persona', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='tipos_persona', to='centros_proteccion.dtipopersona', verbose_name='tipo persona')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ServiciosSaludCarac',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('habilitado', models.BooleanField(null=True)),
                ('caracterizacion', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='car_serv_salud', to='centros_proteccion.caracterizacion')),
                ('servicios_salud', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='car_serv_salud', to='centros_proteccion.dserviciossalud')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('ver_caracterizacion', 'Puede ver la caracterización'), ('modificar_caracterizacion', 'Puede modificar la caracterización'), ('crear_caracterizacion', 'Puede crear la caracterización'), ('eliminar_caracterizacion', 'Puede eliminar la caracterización')),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResCincuentaCincoCV',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('doc_dominio', models.BooleanField(default=False, help_text='Documentos que acrediten el dominio del inmueble o de los derechos para se utilizadospor parte del establecimiento a traves de su representante legal', null=True)),
                ('planos_depend', models.BooleanField(default=False, help_text='Plano o croquis a escala de todas las dependencias', null=True)),
                ('preve_incendio', models.BooleanField(default=False, help_text='Prevención de incendios', null=True)),
                ('cond_sani_amb', models.BooleanField(default=False, help_text='Condiciones sanitarias y ambientales Ley 9 de 1979', null=True)),
                ('cert_elec', models.BooleanField(default=False, help_text='Certificado eléctrica', null=True)),
                ('cert_gas', models.BooleanField(default=False, help_text='Certificado de gas', null=True)),
                ('plan_evacuacion', models.BooleanField(default=False, help_text='Plan de evacuación', null=True)),
                ('libro_pqrs', models.BooleanField(default=False, help_text='Libro de PQRS', null=True)),
                ('centro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='centros_55', to='centros_proteccion.centroatencion')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RepresentanteLegal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('cedula', models.CharField(max_length=50)),
                ('primer_nombre', models.CharField(max_length=50)),
                ('segundo_nombre', models.CharField(blank=True, max_length=50, null=True)),
                ('primer_apellido', models.CharField(max_length=50)),
                ('segundo_apellido', models.CharField(blank=True, max_length=50, null=True)),
                ('direccion', models.CharField(blank=True, max_length=250, null=True)),
                ('telefono', models.CharField(blank=True, max_length=50, null=True)),
                ('celular', models.CharField(blank=True, max_length=50, null=True)),
                ('correo', models.EmailField(blank=True, max_length=254, null=True)),
                ('muni_residencia', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='representante_legal', to='centros_proteccion.municipio')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Representante Legal',
                'verbose_name_plural': 'Representantes Legales',
                'ordering': ['primer_apellido', 'primer_nombre'],
                'permissions': (('ver_representante_legal', 'Puede ver el representante legal'), ('modificar_representante_legal', 'Puede modificar el representante legal'), ('crear_representante_legal', 'Puede crear el representante legal'), ('eliminar_representante_legal', 'Puede eliminar el representante legal')),
            },
        ),
        migrations.AddField(
            model_name='razonsocial',
            name='representante_legal',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='razon_social', to='centros_proteccion.representantelegal'),
        ),
        migrations.AddField(
            model_name='razonsocial',
            name='tipo_persona',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='razon_social', to='centros_proteccion.dtipopersona'),
        ),
        migrations.AddField(
            model_name='razonsocial',
            name='usuario_registro',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProfesionalSaludCarac',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('cantidad', models.IntegerField(blank=True, null=True)),
                ('caracterizacion', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='caracterizacion_profesional_salud', to='centros_proteccion.caracterizacion')),
                ('profesional', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='caracterizacion_profesional_salud', to='centros_proteccion.dprofesionalsalud')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('ver_caracterizacion', 'Puede ver la caracterización'), ('modificar_caracterizacion', 'Puede modificar la caracterización'), ('crear_caracterizacion', 'Puede crear la caracterización'), ('eliminar_caracterizacion', 'Puede eliminar la caracterización')),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PonderacionColumna',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('criterio', models.TextField()),
                ('campo', models.CharField(max_length=100)),
                ('ponderacion', models.DecimalField(decimal_places=2, help_text='ponderacion', max_digits=2)),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('ver_permisos_administrativos', 'Puede ver los permisos administrativos'), ('modificar_permisos_administrativos', 'Puede modificar los permisos administrativos'), ('crear_permisos_administrativos', 'Puede crear los permisos administrativos'), ('eliminar_permisos_administrativos', 'Puede eliminar los permisos administrativos')),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NumerosTelefono',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('numero', models.CharField(max_length=20)),
                ('centro_proteccion', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='telefonos', to='centros_proteccion.centroatencion')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='municipio',
            name='provicia',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='municipios', to='centros_proteccion.provincia'),
        ),
        migrations.AddField(
            model_name='municipio',
            name='red',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='municipios', to='centros_proteccion.red'),
        ),
        migrations.CreateModel(
            name='LineamientosCentroProtec',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('rg_regis_usuarios', models.BooleanField(default=False, help_text='La  institución  cuenta  con  el  registro  de  los  usuarios  incluyendo  los  datos mínimos  de  identificación  de  la  persona  mayor  y  la  familia,  teléfonos  de contacto para casos de urgencia y seguridad social en salud.')),
                ('rg_legales', models.BooleanField(default=False, help_text='Cumple  con  los  requisitos  legales  exigidos  por  las  normas  vigentes  con respecto a su existencia y representación legal, de acuerdo con su naturaleza jurídica')),
                ('rg_contable', models.BooleanField(default=False, help_text='Cuenta con un sistema contable para generar estados financieros según las normas contables vigentes')),
                ('rg_segurida_social', models.BooleanField(default=False, help_text='La institución verifica y tiene claramente identificadas las condiciones de seguridad social en salud de cada uno de los usuarios con el fin de coordinar los servicios de salud que deban ser prestados fuera de ella.')),
                ('rg_encuestas', models.BooleanField(default=False, help_text='Aplica encuestas de satisfacción tanto a los residentes como a los familiares, las cuales incluyen aspectos como infraestructura, trato, calidad de la comida, higiene, privacidad, actividades de recreación, cuidados, oportunidad y participación de la familia.')),
                ('rg_pqr', models.BooleanField(default=False, help_text='Tiene un sistema para escuchar y tramitar las quejas y sugerencias de los residentes o sus familiares.')),
                ('rg_situa_residente', models.BooleanField(default=False, help_text='La institución evalúa la situación del residente y su familia con el fin de evitar la institucionalización innecesaria o prematura. Aplica para los centros residenciales para persona mayor.')),
                ('rg_crite_institu', models.BooleanField(default=False, help_text='La institución cumple con los siguientes criterios de institucionalización para aceptar a un usuario (Aplica para centros residenciales para persona mayor): Persona mayor dependiente sin familia ni responsable conocido. Persona mayor dependiente con familia. Deberá adjuntar un documento expreso de autorización y un documento de obligación de visita. Persona mayor independiente sin familia. Deberá adjuntar un documento expreso de voluntad (consentimiento informado). Persona mayor independiente con familia. Deberá adjuntar un documento expreso de voluntad y un doc. de obligación de visita.')),
                ('rg_selecc_resi', models.BooleanField(default=False, help_text='La institución cuenta con criterios de selección de residentes que pueden ingresar a la institución y cuales no, de acuerdo con el tipo de usuarios que puede atender según su dependencia y la capacidad de respuesta de la institución')),
                ('rg_selecc_personal', models.BooleanField(default=False, help_text='La institución incluye dentro de sus procesos de selección de personal, criterios para identificar la competencia de los trabajadores en relación con el manejo de los persona s mayores')),
                ('rg_dere_debere', models.BooleanField(default=False, help_text='Tiene procesos documentados para capacitación en deberes y derechos dla persona Mayor, al personal que labora en la institución')),
                ('rg_fallece', models.BooleanField(default=False, help_text='Cuenta con el procedimiento para cuando un persona mayor fallezca dentro de la institución.')),
                ('sh_suminis_servicios', models.BooleanField(default=False, help_text='La institución garantiza los servicios de suministro de agua, energía eléctrica, sistemas de  comunicaciones según disponibilidad tecnológica, como también de manejo y evacuación de residuos sólidos y de residuos líquidos.')),
                ('sh_instala_agua', models.BooleanField(default=False, help_text='Las instalaciones interiores para suministro de agua están diseñadas y construidas de tal manera que haya normal funcionamiento')),
                ('sh_almacena_agua', models.BooleanField(default=False, help_text='La institución cuenta con tanques de almacenamiento de agua, que garantiza como mínimo, 24 horas de servicio; y su construcción permite que durante la operación de limpieza y desinfección no se interrumpa el suministro de agua. Tiene un área para el uso técnico de los elementos de aseo. Los baños cuentan con los accesorios necesarios, para lavado y desinfección de patos o disponen de un ambiente específico para este proceso. Las instituciones localizadas en zonas o ciudades de clima frío deberán contar con calentadores de agua para el baño de los residentes.')),
                ('sh_mate_escaleras', models.BooleanField(default=False, help_text='Si tiene escaleras o rampas, éstas son de material antideslizante en todo su recorrido, con pasamanos de preferencia a ambos lados, que se prolongan antes del inicio y al final, y con protecciones laterales hacia espacios libres. En los establecimientos de más de un piso deberán contar con un sistema seguro de traslado de los residentes entre un piso y otro (circulación vertical) que permita la cabida de una silla de ruedas o de una camilla. ')),
                ('sh_puertas_acceso', models.BooleanField(default=False, help_text='Las puertas de acceso a los cuartos permiten un fácil paso y giro de sillas de ruedas. El ambiente de los baños permite el fácil desplazamiento dla persona mayor, las puertas de los baños tienen un ancho que permite el fácil acceso de residentes en sillas de ruedas y cuentan con un sistema que permite ser abiertas rápidamente y desde afuera. Los baños cuentan con los pasamanos necesarios para que los residentes puedan sujetarse al hacer uso del sanitario o el lavamanos, de acuerdo con su limitación. Los servicios higiénicos deben estar cercanos a los dormitorios, ser de fácil acceso y estar iluminados y debidamente señalizados.')),
                ('sh_protec_areas_circ', models.BooleanField(default=False, help_text='Las áreas de circulación tienen protecciones laterales, en forma de baranda. Zonas de circulación con pasillos que permitan el paso de una camilla, bien iluminados, sin desniveles o con rampas, si los hay, y pasamanos al menos en uno de sus lados. Si tiene escaleras, estas no podrán ser de tipo caracol no tener peldaños en abanico y deberán tener un ancho que permita el paso de dos (2) personas al mismo tiempo, con pasamanos en ambos lados y peldaños evidenciados.')),
                ('sh_mecanis_protecc', models.BooleanField(default=False, help_text='Cuenta con mecanismos de protección contra lesiones y evita condiciones del ambiente u objetos que puedan producir autolesiones en los persona s mayores. Incluye: Los cables de instalación eléctrica no están en lugares de paso.Hay interruptores para encender luces en lugares de fácil acceso, conmutados, al principio y al final de las escaleras, en la cabecera de la cama y al principio y al final de los pasillos.Preferiblemente con testigo luminoso para localizarlos fácilmente en la oscuridad. La institución cuenta con buena iluminación.Los tomacorrientes son suficientes para evitar extensiones y los que no se encuentran en uso cuentan con protectores en caso de que haya residentes con déficit cognitivo.Los pasamanos son de material resistente a la humedad y no conductor de electricidadLos pisos son lisos, antideslizantes, sin elementos que sobresalgan. Si existen peldaños, éstos están señalizados.Los muebles están dispuestos para que no dificulten el paso; en la medida de lo posible deben tener bordes redondeados, ser estables y resistentes y la sillas preferiblemente con brazos para facilitar el ponerse de pie.Los pisos de los baños son de material antideslizante o cuentan con elementos como tapetes antideslizantes.Los tapetes cuentan con mecanismos seguros para fijarlos al pisoProcura que los elementos para la alimentación sean difícilmente rompiblesCuenta con un área para el almacenamiento de elementos potencialmente peligrosos con la protección necesaria para evitar el acceso.Cuenta con restricciones físicas para el ingreso a áreas potencialmentepeligrosas para persona s mayores con discapacidad cognitiva como cocinas, áreas de gases medicinales, depósitos de medicamentos y almacenes de insumos, entre otras. Procura una temperatura agradable dentro de la instituciónLos pisos de estos serán antideslizantes o con aplicaciones antideslizantes, contarán con agua caliente y fría, agarraderas de apoyo, duchas que permitan el baño auxiliado y entrada de elementos de apoyo y timbre de tipo continuo.')),
                ('sh_progra_mantenimiento', models.BooleanField(default=False, help_text='Cuenta con un programa de mantenimiento para la infraestructura de las habitaciones, baños y zonas sociales. Zonas exteriores para recreación: patio, terraza o jardín.')),
                ('sh_dot_hospedaje', models.BooleanField(default=False, help_text='Cuenta con la dotación necesaria para brindar el servicio de hospedaje en condiciones cómodas, seguras y adaptables a las necesidades de cada usuario. Como mínimo deberá contar con una cama y un mueble de fácil acceso para guardar las pertenencias del usuario de manera segura. Deberá tener algún sistema de llamado para que cada uno de los residentes pueda solicitar ayuda desde su cama y desde el baño. Las duchas deben permitir la entrada de silla de ruedas, deberán tener un inodoro y un lavamanos. Además habrá un lavamanos en los dormitorios de pacientes postrados.')),
                ('sh_priv_comp', models.BooleanField(default=False, help_text='Cuando las habitaciones son compartidas, se cuenta con los mecanismos o procedimientos para preservar la privacidad de los residentes.')),
                ('sh_insumos_limp', models.BooleanField(default=False, help_text='Cuenta con los insumos necesarios para la limpieza y aseo de las habitaciones, baños y zonas sociales')),
                ('sh_vis_conv_med', models.BooleanField(default=False, help_text='Tiene procesos documentados en relación con horarios y condiciones especiales para las visitas, como por ejemplo normas de convivencia, manejo de medicamentos y dietas')),
                ('sh_plan_emergencia', models.BooleanField(default=False, help_text='Cuenta con planes para emergencias, desastres, seguridad e incendios.')),
                ('sh_proc_seguridad', models.BooleanField(default=False, help_text='Cuenta con procesos para la seguridad de los residentes, que incluyan registros de las entradas y salidas de cada uno de ellos y sobre la responsabilidad de custodia.')),
                ('sh_prev_enfer_infecc', models.BooleanField(default=False, help_text='Tiene y aplica normas de seguridad para la prevención de enfermedades infectocontagiosas.')),
                ('sh_prev_lesiones', models.BooleanField(default=False, help_text='Tiene procedimientos preventivos de lesiones que puedan sufrir los usuarios en la institución, previa identificación de riesgos. Deberá contar con un manual de procedimientos en el cual se definan las normas de protección para los residentes. El manual debe incluir los procedimientos para la supervisión permanente de los usuarios con discapacidad cognitiva en todo momento por parte del personal de la institución, los procedimientos para la protección contra elementos o infraestructura potencialmente riesgosos para los usuarios, los procedimientos para las restricciones de acceso a usuarios con D.C.')),
                ('sh_proce_accidente', models.BooleanField(default=False, help_text='Cuenta con procedimientos para cuando un usuario se pierda o cuando sufra algún accidente.')),
                ('sh_prev_abuso', models.BooleanField(default=False, help_text='Tiene procedimientos documentados para prevención y manejo de abuso emocional, físico, sexual, abandono y explotación por parte de los trabajadores de la institución u otras personas.')),
                ('sh_lavan_sergen', models.BooleanField(default=False, help_text='Cuenta con servicio de alimentación, de lavandería o ropería y servicios generales, propios o contratados. Si no son propios, la institución debe garantizar la calidad de los procesos contratados La cocina deberá cumplir con las condiciones higiénicas y sanitarias que aseguren una adecuada recepción, almacenamiento, preparación y manipulación de los alimentos. Su equipamiento, incluida la vajilla, estará de acuerdo con el número de raciones a preparar.')),
                ('sh_almac_alimentos', models.BooleanField(default=False, help_text='Si cuenta con cocina, existe un área para el almacenamiento de alimentos, a la cual se realiza control de roedores e insectos El piso y las paredes serán lavables; estará bien ventilada, ya sea directamente al exterior o a través de campana o extractor.')),
                ('sh_accid_cocina', models.BooleanField(default=False, help_text='Cuenta con la infraestructura necesaria y normas de seguridad con el fin de evitar accidentes relacionados con la utilización de gas en la cocina, para calentamiento de agua etc.')),
                ('sh_manual_alis_nutri', models.BooleanField(default=False, help_text='La institución tiene y aplica un manual de instrucción en alimentación y nutrición que incluya las dietas especiales de los residentes de acuerdo con sus enfermedades de base, así como ciclos de menús. Comedor o comedores suficientes para el cincuenta por ciento (50%) de los residentes simultáneamente.')),
                ('sh_proc_varios', models.BooleanField(default=False, help_text='Se cuenta con procesos para la recepción, lavado, secado, planchado y almacenamiento de ropa, si el servicio de lavandería y ropería es propio. Lugar cerrado y ventilado destinado a guardar los útiles de aseo en uso. Una poceta para el lavado de útiles de aseo, lavadero, con un lugar de recepción y almacenamiento para la ropa sucia, lavadora adecuada al número de residentes e implementación para el secado y planchado de la ropa, además de un lugar para clasificar y guardar la ropa limpia. Si existe servicio externo de lavado, se asignarán espacios para clasificar y guardar ropa sucia y limpia.')),
                ('cpm_cuida_capac', models.BooleanField(default=False, help_text='Cuenta con cuidadores capacitados en la atención a la persona mayor. Los cuidadores son coordinados como mínimo por auxiliares de enfermería, los cuales también requerirán de capacitación en el manejo de la persona mayor.')),
                ('cpm_carga_asistencial', models.BooleanField(default=False, help_text='La institución ha realizado un estudio de la carga asistencial que cada residente requiere teniendo en cuenta aspectos como: necesidades de atención, control de esfínteres, transferencias y desplazamientos, dependencia psíquica etc, con el fin de identificar la suficiencia del recurso humano.')),
                ('cpm_eva_bienestar', models.BooleanField(default=False, help_text='La institución realiza evaluación integral de necesidades para el bienestar de la persona mayor y desarrolla un plan integral de bienestar para cada uno de los residentes')),
                ('cpm_proc_th', models.BooleanField(default=False, help_text='Tiene procesos documentados y aplicados en relación con la capacitación al recurso humano en cuidado de persona mayor.')),
                ('cpm_insu_cuid_diar', models.BooleanField(default=False, help_text='Cuenta con los insumos necesarios para brindar a los usuarios los cuidados diarios relacionados con higiene, cuidado personal y alimentación. Dormitorios con iluminación y ventilación natural, guardarropa con espacio para cada uno de los residentes y un nochero por cama, considerando espacio para un adecuado desplazamiento de las personas según su autonomía. Contará con un timbre tipo continuo por habitación y en el caso de residentes postrados, uno por cama. Contar con un número de camillas clínicas o similares para el ciento por ciento (100%) de los adultos mayores y/o discapacitados que necesiten protección física o clínica.')),
                ('cpm_proc_activ_diarios', models.BooleanField(default=False, help_text='Tiene los procesos documentados en relación con las actividades diarias de los usuarios como baño, vestido, arreglo personal, supervisión, alimentación asistida y condiciones de seguridad especial de acuerdo con el tipo de usuarios que se encuentren en el hogar.')),
                ('cpm_proc_interven_medica', models.BooleanField(default=False, help_text='Cuenta con los procedimientos documentados para la identificación de los casos que requieren la intervención médica y para su llamado o la valoración de la persona mayor.')),
                ('cpm_proc_cuidad_noche', models.BooleanField(default=False, help_text='Tiene procedimientos documentados para cuidados durante la noche, servicios de relevo y supervisión.')),
                ('cpm_proc_remision', models.BooleanField(default=False, help_text='Tiene procesos documentados en relación con la remisión de un usuario cuando se presenten condiciones de urgencia. Tiene identificados los mecanismos y lugares de remisión que debe atender para cada usuario de acuerdo con su afiliación a la seguridad social.')),
                ('cpm_proc_residuos_bio', models.BooleanField(default=False, help_text='La institución cuenta con procedimientos documentados para el manejo de los residuos hospitalarios infecciosos o de riesgo biológico dispositivo hermético de almacenamiento transitorio de basura. Todas las dependencias deberán mantenerse en buenas condiciones higiénicas.')),
                ('cpm_elem_presion', models.BooleanField(default=False, help_text='Para los residentes con gran inmovilidad cuenta con colchonetas o elementos para evitar las úlceras de presión')),
                ('cpm_proc_cuidad_piel', models.BooleanField(default=False, help_text='Tiene documentados los procedimientos de cuidado de la piel, cambios de posición, etc. para evitar úlceras de presión')),
                ('cpm_proc_info_familia', models.BooleanField(default=False, help_text='Tiene los procesos documentados en relación con la información que se da a los familiares de los personas mayores.')),
                ('cpm_depo_medicamentos', models.BooleanField(default=False, help_text='Cuenta con un espacio para el depósito de medicamentos, el cual deberá estar en un área de circulación restringida y garantiza un sistema de ventilación natural y/o artificial de forma que conserve la vida útil de los productos farmacéuticos y afines y condiciones de temperatura y humedad relativa, de acuerdo con lo recomendado por el fabricante. Deberá contar con la dotación para el control de temperatura y humedad. No es obligatorio contar con servicio farmacéutico, sin embargo si lo tiene deberá cumplir con todo lo establecido en las normas de habilitación vigentes. Lugar cerrado para mantener equipamiento e insumos médicos y de enfermería mínimos, tales como esfigmomanómetro, fonendoscopio, termómetros, medicamentos, elementos e insumos de primeros auxilios y archivo de fichas clínicas.')),
                ('cpm_proc_riesgo_servicio', models.BooleanField(default=False, help_text='La institución realiza procesos de evaluación y seguimiento de los riesgos inherentes al servicio, tales como: No. de Infecciones intrainstitucionales al mes, No. de caídas al mes, No. de otros accidentes al mes, No. de complicaciones de los procedimientos que se realizan en la institución al mes.')),
                ('cpm_ss_decreto', models.BooleanField(default=False, help_text='Si ofrece servicios de salud, cumple con lo establecido en el Decreto 1011 de 2006 y la Resolución 1043 de 2006 o las normas que lo modifiquen, adicionen o sustituyan.')),
                ('cpm_ss_plan_individual', models.BooleanField(default=False, help_text='Si ofrece servicios de salud, la institución desarrolla un plan individual para el manejo de cada uno de los usuarios, por parte de los profesionales de salud que participen en su tratamiento, coordinado por un médico, el cual incluya las actividades a realizar y su periodicidad en especial lo relacionado con visita médica, exámenes de control, medicamentos, procedimientos, supervisión y dietas.')),
                ('cpm_ss_proc_prescripcion', models.BooleanField(default=False, help_text='Si tiene servicios de salud, cuenta con procedimientos para la prescripción y realización de ejercicio, en especial para los usuarios que presenten patologías crónicas y/o rehabilitación. La prescripción del ejercicio solo podrá ser realizada por médico o fisioterapeuta')),
                ('sae_proc_activ_educ', models.BooleanField(default=False, help_text='Tiene documentados los procedimientos para las actividades educativas y de programas laborales para la enseñanza de nuevos oficios, de acuerdo con el estado y preferencia de cada usuario. Si se desarrollan actividades preventivas por parte de los persona s mayores, se establece con claridad la destinación de los recursos obtenidos ')),
                ('sae_proc_apoyo_familia', models.BooleanField(default=False, help_text='Tiene documentados los procesos para apoyar a la familia de los usuarios con demencia o discapacidad cognitiva. ')),
                ('sae_proc_deb_der_usuario', models.BooleanField(default=False, help_text='Tiene procesos documentados para capacitación en deberes y derechos a los usuarios y sus familias cuenta con al menos una oficina/sala de recepción, que permita mantener entrevistas en forma privada con los residentes y sus familiares.')),
                ('sae_proc_visitas', models.BooleanField(default=False, help_text='Cuenta con procesos para estimular las visitas e integrar a la familia de los residentes y evitar el abandono. Aplica para los centros residenciales para persona mayor.')),
                ('sae_proc_vida_saludable', models.BooleanField(default=False, help_text='Cuenta con procedimientos documentados para estimular y fortalecer hábitos de vida saludable para la persona mayor como por ejemplo: ,Promoción de autonomía e independencia, Realización de ejercicio físico en forma regular, Combatir la obesidad, Disminuir el consumo de alcohol y tabaco, Evitar ropas ajustadas, Uso de calzado adecuado, Evita situaciones de estrés, Tomar medidas que prevengan las malas posturas, Cuidados de los pies, Uso de cremas hidratantesNo exposiciones prolongadas al sol, Estimular el consumo de alimentos frescos en lugar de los que contienen conservantes y preservativos, Participar en las actividades lúdicas o culturales, Expresar su sexualidad, Estimular la capacidad de expresar sentimientos, Estimular la aceptación de las limitaciones y mejoramiento de autoimagen')),
                ('rs_esp_ludico', models.BooleanField(default=False, help_text='Cuenta con un espacio físico de usos múltiples que en conjunto, tengan capacidad para contener a todos los residentes en forma simultánea. Estas deberán tener iluminación natural, medios de comunicación con el mundo exterior y elementos de recreación para los residentes, tales como música, juegos, revistas, libros, etc.')),
                ('rs_prog_acti_recre', models.BooleanField(default=False, help_text='Tiene un programa documentado para las actividades recreativas como por ejemplo: Juegos de mesa. Deportes para la persona mayor. Tratamientos de relajación. Danza. Biblioteca. Actividades culturales. Manualidades. Jardinería. Paseos turísticos guiados. Convivencias. Reinserción familiar. Actividades económicas y productivas. Para la ejecución del programa se deberá tener en cuenta las condiciones, habilidades, preferencias y cultura de cada uno de los usuarios.')),
                ('rs_dot_ludicos', models.BooleanField(default=False, help_text='Cuenta con la dotación de elementos lúdicos y de recreación definidos por la institución')),
                ('rs_serv_religioso', models.BooleanField(default=False, help_text='Tiene facilidades para que los residentes tengan acceso a servicios religiosos. Aplica para los centros residenciales para persona mayor')),
                ('rs_parti_voluntaria', models.BooleanField(default=False, help_text='La institución identifica las acciones de participación voluntaria en las actividades diarias de la institución, en cada uno de los residentes de acuerdo con sus habilidades y capacidades físicas y cognitivas')),
                ('obs_general', models.TextField(blank=True, null=True)),
                ('obv_regis_usuarios', models.TextField(blank=True, null=True)),
                ('obv_requi_legales', models.TextField(blank=True, null=True)),
                ('obv_sis_contable', models.TextField(blank=True, null=True)),
                ('obv_verif_segurida_social', models.TextField(blank=True, null=True)),
                ('obv_apli_encuestas', models.TextField(blank=True, null=True)),
                ('obv_pqr', models.TextField(blank=True, null=True)),
                ('obv_situa_residente', models.TextField(blank=True, null=True)),
                ('obv_crite_institu', models.TextField(blank=True, null=True)),
                ('obv_selecc_resi', models.TextField(blank=True, null=True)),
                ('obv_selecc_personal', models.TextField(blank=True, null=True)),
                ('obv_procesos_dere_debere', models.TextField(blank=True, null=True)),
                ('obv_proce_fallece', models.TextField(blank=True, null=True)),
                ('obv_suminis_servicios', models.TextField(blank=True, null=True)),
                ('obv_instala_agua', models.TextField(blank=True, null=True)),
                ('obv_almacena_agua', models.TextField(blank=True, null=True)),
                ('obv_mate_escaleras', models.TextField(blank=True, null=True)),
                ('obv_puertas_acceso', models.TextField(blank=True, null=True)),
                ('obv_protec_areas_circ', models.TextField(blank=True, null=True)),
                ('obv_mecanis_protecc', models.TextField(blank=True, null=True)),
                ('obv_progra_mantenimiento', models.TextField(blank=True, null=True)),
                ('obv_dotacion_hospedaje', models.TextField(blank=True, null=True)),
                ('obv_privacidad_compartida', models.TextField(blank=True, null=True)),
                ('obv_insumos_limpieza', models.TextField(blank=True, null=True)),
                ('obv_documentos_vis_conv_med', models.TextField(blank=True, null=True)),
                ('obv_plan_emergencia', models.TextField(blank=True, null=True)),
                ('obv_procesos_seguridad', models.TextField(blank=True, null=True)),
                ('obv_preven_enfer_infecc', models.TextField(blank=True, null=True)),
                ('obv_preven_lesiones', models.TextField(blank=True, null=True)),
                ('obv_procediminetos_accidente', models.TextField(blank=True, null=True)),
                ('obv_preven_abuso', models.TextField(blank=True, null=True)),
                ('obv_servicios_ali_lavan_sergen', models.TextField(blank=True, null=True)),
                ('obv_almacenamiento_alimentos', models.TextField(blank=True, null=True)),
                ('obv_accid_cocina', models.TextField(blank=True, null=True)),
                ('obv_manual_alis_nutri', models.TextField(blank=True, null=True)),
                ('obv_procesos_varios', models.TextField(blank=True, null=True)),
                ('obv_cuidador_capacitado', models.TextField(blank=True, null=True)),
                ('obv_carga_asistencial', models.TextField(blank=True, null=True)),
                ('obv_evalucion_bienestar', models.TextField(blank=True, null=True)),
                ('obv_proc_th', models.TextField(blank=True, null=True)),
                ('obv_insumos_cuidados_diarios', models.TextField(blank=True, null=True)),
                ('obv_proc_activ_diarios', models.TextField(blank=True, null=True)),
                ('obv_proc_interven_medica', models.TextField(blank=True, null=True)),
                ('obv_proc_cuidad_noche', models.TextField(blank=True, null=True)),
                ('obv_proc_remision', models.TextField(blank=True, null=True)),
                ('obv_proc_residuos_bio', models.TextField(blank=True, null=True)),
                ('obv_elem_presion', models.TextField(blank=True, null=True)),
                ('obv_proc_cuidad_piel', models.TextField(blank=True, null=True)),
                ('obv_proc_info_familia', models.TextField(blank=True, null=True)),
                ('obv_depo_medicamentos', models.TextField(blank=True, null=True)),
                ('obv_proc_riesgo_servicio', models.TextField(blank=True, null=True)),
                ('obv_ss_decreto', models.TextField(blank=True, null=True)),
                ('obv_ss_plan_individual', models.TextField(blank=True, null=True)),
                ('obv_ss_proc_prescripcion', models.TextField(blank=True, null=True)),
                ('obv_proc_activ_educativas', models.TextField(blank=True, null=True)),
                ('obv_proc_apoyo_familia', models.TextField(blank=True, null=True)),
                ('obv_proc_deb_der_usuario', models.TextField(blank=True, null=True)),
                ('obv_proc_visitas', models.TextField(blank=True, null=True)),
                ('obv_proc_vida_saludable', models.TextField(blank=True, null=True)),
                ('obv_esp_ludico', models.TextField(blank=True, null=True)),
                ('obv_prog_acti_recre', models.TextField(blank=True, null=True)),
                ('obv_dot_ludicos', models.TextField(blank=True, null=True)),
                ('obv_serv_religioso', models.TextField(blank=True, null=True)),
                ('obv_parti_voluntaria', models.TextField(blank=True, null=True)),
                ('suma_rg', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=4, null=True)),
                ('suma_sh', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=4, null=True)),
                ('suma_cpm', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=4, null=True)),
                ('suma_sae', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=4, null=True)),
                ('sum_eva', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=4, null=True)),
                ('suma_rs', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=4, null=True)),
                ('suma_total', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, null=True)),
                ('centro_proteccion', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='lineamientos', to='centros_proteccion.centroatencion')),
                ('estandarizacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='indi_proteccion', to='centros_proteccion.estandarizacion')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LeyTreceQuince',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('doc_dominio', models.BooleanField(default=False, help_text='Documentos que acrediten el dominio del inmueble o de los derechos para ser utilizados por parte del e establecimiento a través de su representante legal ', null=True)),
                ('planos_depend', models.BooleanField(default=False, help_text='Plano o croquis a escala de todas las dependencias, indicando distribución de las camas y dormitorios', null=True)),
                ('cond_sani_amb', models.BooleanField(default=False, help_text='Condiciones sanitarias y ambientales Ley 9 de 1979', null=True)),
                ('cert_elec', models.BooleanField(default=False, help_text='Certificado eléctrica', null=True)),
                ('director_tec', models.BooleanField(default=False, help_text='Identificación del director técnico responsable con copia de su certificado de titulo, carta de aceptación del cargo y horario en que se encontrará en el establecimiento ', null=True)),
                ('planta_personal', models.BooleanField(default=False, help_text='Planta del personal con que funcionará el establecimiento, con su respetivo sistema de turnos, información que deberá actualizar-se al momento en que se produzcan cambios en este aspecto. Una vez que entre en funciones, deberá enviar a la Secretaria de Salud competente, la nómina del personal que labora ahí', null=True)),
                ('reg_interno', models.BooleanField(default=False, help_text='Reglamento interno del establecimiento, que deberá incluir un formulario de los contratos que celebrará el establecimiento con los residentes o sus representantes, en el que se estipulen los derechos y deberes de ambas partes y las causales de exclusión del residente', null=True)),
                ('plan_evacuacion', models.BooleanField(default=False, help_text='Plan de evacuación', null=True)),
                ('libro_pqrs', models.BooleanField(default=False, help_text='Libro foliado de uso de los residentes o sus familiares, para sugerencias o reclamos que será timbrado por la autoridad sanitaria', null=True)),
                ('centro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='centros_1315', to='centros_proteccion.centroatencion')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CriteriosVidaDia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('th_director', models.BooleanField(default=False, help_text='Cuenta con un director quien es responsable del cumplimiento de los servicios ofrecidos por los centros. Deberá certificar minimo formación tecnológica o profesional en ciencias humanas, ciencias sociales o ciencias de la salud. En centros con hasta 60 personas usuarias inscritas cuentan con uin director o coordinador con disponibilidad de minimo 4 horas diarias por cada dia que el centro preste servicios. En centros con 61 o mas personas usuarias inscritas cuentan con un director o coordinador con disponibilidad de 8 horas diarias por cada dia que el centro preste servicios.')),
                ('th_menus', models.BooleanField(default=False, help_text='Dispone de 1 responsable de la definición de menús del Centro,con formación en nutrición y dietética, que garantice que laspersonas mayores reciban una alimentación variada,balanceada y acorde a sus necesidades. En Centros con hasta 60 personas usuarias inscritas cuentan con 1 responsable con disponibilidad de mínimo 8 horas mensuales, distribuidas en minimo 2 visitas al mes, cada dos semanas, cada una de 4 horas continuas En Centros con 61 o más personas usuarias inscritas cuentancon 1 responsable con disponibilidad de mínimo 16 horas mensuales, distribuidas en mínimo 4 visitas al mes, cadasemana, cada una de 4 horas continuas')),
                ('th_mante', models.BooleanField(default=False, help_text='Dispone de mínimo 1 responsable del mantenimiento y aseo de la infraestructura física y equipamiento del Centro. En Centros con hasta 15 personas usuarias inscritas cuentan con mínimo 1 responsable con disponibilidad de mínimo 2 horas diarias por cada día que el Centro preste servicios.  En Centros con entre 16 y 60 personas usuarias inscritas cuentan con mínimo 1 responsable con disponibilidad de mínimo 4 horas diarias por cada dia que el Centro preste servicios. En Centros con 61 o más personas usuarias inscritas cuentan con mínimo 1 responsable con disponibilidad de 8 horas diarias  por cada día Que el Centro preste servicios.')),
                ('th_man_ali', models.BooleanField(default=False, help_text='Cuenta con manipulador de alimentos certificado. En Centros con hasta 15 personas usuarias inscritas cuentan con mínimo 1 manipulador de alimentos con disponibilidad de mínimo 4 horas diarias por cada día que el Centro preste servicios. En Centros con entre 16 y 45 personas usuarias inscritas cuentan con mínimo 1 manipulador de alimentos con disponibilidad de mínimo 6 horas diarias por cada día que el centro preste servicios. En Centros con entre 46 y 60 personas usuarias inscritas cuentan con mínimo 2 manipuladores de alimentos: 1 con disponibilidad de mínimo 6 horas diarias por cada dia que el centro preste servicios y 1 con disponibilidad de mínimo 4 horas diarias por cada día que el Centro preste servicios. En Centros con 61 o más personas usuarias inscritas cuentan con mínimo 2 manipuladores de alimentos con disponibilidad de 8 horas diarias cada uno por cada día que el Centro preste servicios. ')),
                ('th_aux_enf', models.BooleanField(default=False, help_text='Cuenta con mínimo técnico laboral auxiliar en enfermería o en salud pública. En Centros con hasta 60 personas usuarias inscritas cuentan con minimo 1 persona con este perfil, con disponibilidad de mínimo el tiempo que el Centro preste servicios por cada día. En Centros con 61 o más personas usuarias inscritas cuentan con mínimo 2 oersonas con este nerfil, con disnonibilidad de 8 horas diarias cada una por cada día que el Centro preste servicios. ')),
                ('th_acti_fisi', models.BooleanField(default=False, help_text='Cuentan con el personal mínimo para actividad física (1 persona 15 usuarios, 2 personas hasta 30 usuarios, 3 para más usuarios y con los tiempos requeridospor cada día que el Centro esté abierto a los usuarios para el desarrollo de los siguientes 3 servicios en dicho periodo de tiempo: 1) actiVidades físicas y de interacción social, 2) actividades cognitivas y productivas, 3) actividades "ecreativas y culturales.')),
                ('th_cert_emergencia', models.BooleanField(default=False, help_text='Todo el personal del Centro cuenta con constancia o participación en formación para la atención de emergencias, primer respondiente y manejo de elementos en emergencias de mínimo 36 horas. ')),
                ('th_cert_aten_inte', models.BooleanField(default=False, help_text='Cuenta con procesos de inducción y reinducción del talento humano del Centro, orientados al fortalecimiento de capacidades, basados en el enfoque de derechos y el modelo de atención integral y centrada en la persona. El talento humano debe participar en estas actividades al menos una vez al año.')),
                ('th_eval', models.BooleanField(default=False, help_text='Cuenta con evaluaciones del talento humano del Centro para determinar necesidades de mejoramiento y calidad de las interacciones con las personas adultas mayores usuarias, sus familias, proveedores y organizaciones de inspección,  vigilancia y control. ')),
                ('th_dir_formacion', models.BooleanField(default=False, help_text='El director o coordinador cuenta con constancias de asistencia o participación a formaciones para la atención integral de personas adultas mayores. Esas formaciones deberán corresponder a un componente teórico (presencial o virtual) de mínimo 160 horas, y a un componente de experiencia directa de mínimo 320 horas de  atención realizadas durante o posteriormente a las formaciones. Las anteriores constancias deben sumar un mínimo de 480 horas. Las constancia/s del componente teórico deberá/n serexpedida/s por Instituciones de Educación para el Trabajo y el Desarrollo Humano o Instituciones de Educación Superior, leqalmente reconocidas por el Estado colombiano.', null=True)),
                ('th_aux_formacion', models.BooleanField(default=False, help_text='Elllos técnico/s laboral/es auxiliar/es en enfermería o en salud pública cuenta/n con constancia/s de asistencia o participacióna formaCiones para la atención integral de personas adultas mayores. Esas formaciones deberán corresponder a un componenteteórico (presencial o virtual) de mínimo 160 horas, y a un componente de experiencia directa de mínimo 320 horas de tención realizadas durante o posteriormente, a las formaciones. Las anteriores constancias deben sumar un mínimo de 480 horas. La/s constancia/s del componente teórico deberá/n ser expedida/s por Instituciones de Educación para el Trabajo y el Desarrollo Humano o Instituciones de Educación Superior, legalmente reconocidas por el Estado colombiano.', null=True)),
                ('th_acti_recre', models.BooleanField(default=False, help_text='El/los responsable/s de brindar los servicios de 1) actividades físicas y de interacción social, 2) actividades cognitivas y productivas, 3) actividades recreativas y culturales cuenta/n con constancia/s de asistencia o participación a formaciones para la atención integral de personas adultas mayore:s. Esas formaciones deberán corresponder a un componente teórico (presencial o virtual) de mínimo 160 horas, y a un componente de experiencia directa de mínimo 320 horas de atención realizadas durante o posteriormente a las, formaciones. Las anteriores constancias deben sumar un mínimo de 480 horas. la/s constancia/s del componente teorico deberá/n ser expedida/s por Instituciones de Educación para el Trabajo y el Desarrollo Humano o Instituciones de Educación Superior, legalmente reconocidas por el Estado colombiano.')),
                ('th_proc_indu_reind_th', models.BooleanField(default=False, null=True)),
                ('th_progr_cap_anual', models.BooleanField(default=False, null=True)),
                ('th_acti_esti', models.BooleanField(default=False, null=True)),
                ('inf_ambi_limpios', models.BooleanField(default=False, help_text='Cuenta con ambientes limpios, sin malos olores, en debidas condiciones higiénico-sanitarias, libres de ruidos y contaminacion.')),
                ('inf_ambi_solario', models.BooleanField(default=False, help_text='Cuenta con area de estar o solario, iluminado, ventilado que  permita el descanso de llos usuarios')),
                ('inf_ambi_iluminado', models.BooleanField(default=False, help_text='Cuenta con un área iluminada y ventilada destinada para trabajo en grupo, compatible con actividades de estimulación cognitiva, interacción social, lúdica, recreativa, cultural, física y productiva. Cuenta, en cada actividad, con un área mínima en uso por usuario de 1,5 metros2 ')),
                ('inf_3_6_metros', models.BooleanField(default=False, help_text='Cuenta con un ambiente para comedor destinado a la toma de los alimentos de los usuarios, con puestos de un área mínima de 3,6 metros2.')),
                ('inf_reso_previa', models.BooleanField(default=False, help_text='El Centro cuenta con concepto sanitario favorable, de acuerdo con la Resolución 2674 de 2013 del Ministerio de Salud y Protección Social o norma que la modifique o sustituya, independiente de si los alimentos son preparados en el Centro o suministrados por proveedor,')),
                ('inf_ambiente', models.BooleanField(default=False, help_text='Cuenta con un área para recepción y manejo administrativo delCentro, diferente de las áreas donde se brindan los servicios alos usuarios.', null=True)),
                ('inf_servicio_gen', models.BooleanField(default=False, help_text='Cuenta con área para servicios generales, con espacio destinado para el almacenamiento de elementos de aseo, limpieza y desinfección. ', null=True)),
                ('inf_deambu', models.BooleanField(default=False, help_text='Cuenta con áreas y ajustes razonables que permitan la movilidad segura por las instalaciones. La edificación deberá ser accesible externa e internamente, de acuerdo con lo previsto en la Resolución 14861 de 1985 del Ministerio de Salud o la norma Que la modifique o sustituya.', null=True)),
                ('inf_senal_emergencia', models.BooleanField(default=False, help_text='Cuenta con accesos, áreas de circulación y salidas señalizadas, de acuerdo con lo establecido en la Resolución 14861 de 1985 del Ministerio de Salud o la norma que lo modifica o sustituya.')),
                ('inf_infra_clima', models.BooleanField(default=False, help_text='Cuenta con infraestructura acorde con las condiciones climáticas del entorno geográfico del Centro, garantizando iluminación natural, ventilación y temperatura ajustada a las necesidades de los usuarios.')),
                ('inf_pisos', models.BooleanField(default=False, help_text='Cuenta con pisos firmes, antideslizantes y continuos y con los elementos necesarios para prevenir caídas.')),
                ('inf_unidad_sanitaria', models.BooleanField(default=False, help_text='Cuenta con minimo 1 unidad sanitaria por sexo por cada 15 usuarios en desarrollo de las actividades de los servicios, con facilidad de acceso para personas con discapacidad. de acuerdo con el artículo 50 de la Resolución 14861 de 1985 del Ministerio de Salud o la norma que lo modifica o sustituya. ')),
                ('inf_ascenso', models.BooleanField(default=False, help_text='En instalaciones donde la atención a las personas adultas mayores se preste en más de dos pisos, se cuenta con rampas o ascensores que cumplan criterios de accesibilidad. Además de cumplir con la reglamentación vigente sobre escaleras y ascensores.')),
                ('inf_cocina_cv', models.BooleanField(default=False, help_text='El servicio de cocina puede ser brindado directamente por el Centro Vida o contratado. En el primer caso, el centro deberá contar con ambiente para recepción, almacenamiento de víveres secos, refrigeración para víveres perecederos, despensa diaria, preparación, cocción y distribución de alimentos con cumplimiento de licencia sanitaria para manipulación de alimentos. También deberá disponer de área de lavado de ollas, utensilios y de vajilla, vestuarios de personas y el área tendrá ventilación e iluminación, preferiblemente natural.')),
                ('inf_cocina_area', models.BooleanField(default=False, help_text='El área mínima para el servicio de cocina y según la capacidad del centro será de 1.20 metros2 por cada usuario hasta 30 personas adultas mayores, y de 0.80 metros2 para 31 usuarios en adelante.')),
                ('inf_agua', models.BooleanField(default=False, help_text='Cuenta con dispensación de agua para las personas adultas mayores, con temperatura templada. La dispensación de agua deberá estar libre de riesgos de quemaduras o hipotermia.')),
                ('inf_esp_acce', models.BooleanField(default=False, help_text='Cuenta con accesos, áreas de circulación y salidas señalizadas, de acuerdo con los siguientes requisitos: 1. Especiales de accesibilidad: deberán preverse las condiciones necesarias que permitan en cualquier espacio o ambiente interior o exterior, el fácil desplazamiento y el uso en forma confiable y segura de los diferentes servicios, como también la fácil evacuación o salida hacia lugares de refugio en caso de emergencia. 2. Todas las áreas de circulación general deberán tener un ancho mínimo en todo su recorrido de 1.20 metros. 3. Se tendrá en cuenta que las puertas no abran hacia espacios de circulación, se exceptúan puertas de entrada principal las cuales podrán abrir en ambos sentidos.')),
                ('inf_bano', models.BooleanField(default=False, help_text='Cuenta con baño con las siguientes especificaciones: La altura de la taza del inodoro estará entre 0.45 metros y 0.50 metros del piso acabado, con barras laterales que sirvan de apoyo, localizadas a 0.35 metros por encima del aparato sanitario. Los lavamanos serán localizados de manera que su altura máxima no exceda de 0.80 metros con espacio libre debajo de este, se debe disponer de un asiento o mesón en el área de la ducha y el dispensador para el papel higiénico, el toallero y las barras o agarraderas para ducha se colocarán a 0.70 metros desde el piso acabado, los espejos estarán ubicados en su parte inferior a partir de 1.10 metros de altura con una inclinación hacia la persona del 10%. No se podrá tener obstáculos en el piso dentro del baño.')),
                ('inf_rampas', models.BooleanField(default=False, help_text='Las rampas instaladas en los Centros Vida deben cumplir con los siguientes criterios: El piso de la rampa será de material antideslizante y de textura y color diferentes a los pisos adyacentes, este tipo de material se colocará en los descansos y antes del inicio y después de terminar la rampa, en longitud no menor de 0.30 metros. Se deberá además cumplir con los siguientes requisitos: 1. Tramo máximo sin descanso: 10.00 metros, con descanso entre tramos mínimo de: 1.40 metros, de profundidad. 2. Altura libre mínima en todo su recorrido: 2.20 metros. 3. Ancho mínimo en todo su recorrido: 1.20 metros. 4. Pendiente no mayor del 11%. 5. Pasamanos a ambos lados en todo el recorrido, uno a 0.90 metros de altura y el otro a 0.75 metros, lo cual facilita la circulación con apoyo para las personas adultas mayores y para las personas en sillas de ruedas, se prolongarán antes del inicio y al final, paralelos al piso: 0.30 metros, de longitud. 6. Protecciones laterales hacia espacios libres.')),
                ('dot_estar_desca', models.BooleanField(default=False, help_text='Cuenta con equipos, muebles y elementos para ambiente de estar y descanso.', null=True)),
                ('dot_trabajo_grupo', models.BooleanField(default=False, help_text='Cuenta con equipos, insumas y elementos para área de trabajo en grupo y actividades de estimulación cognitiva, interacciones sociales, recreativas, culturales, físicas yy-roductivas.')),
                ('dot_primer_aux', models.BooleanField(default=False, help_text='Cuenta con equipos, insumos y elementos para atención de primeros auxilios, incluida una silla de ruedas.')),
                ('dot_bat_bano', models.BooleanField(default=False, help_text='Cuenta con insumas y elementos de aseo e higiene para baños y unidades sanitarias.')),
                ('dot_equipos', models.BooleanField(default=False, help_text='Cuenta con equipos, insumas y menaje de cocina en general, acordes con la modalidad de provisión de alimentos.')),
                ('dot_comunicacion', models.BooleanField(default=False, help_text='Cuenta con equipos, insumas y elementos para sistemas de comunicación.')),
                ('dot_residuos', models.BooleanField(default=False, help_text='Cumple con la reglamentación de disposición de residuos sólidos.')),
                ('dot_cronograma', models.BooleanField(default=False, help_text='Cuenta con plan de mantenimiento de equipos, muebles y enseres.')),
                ('dot_dif_mov', models.BooleanField(default=False, help_text='Dispone de equipamiento necesario para personas con dificultades de movilidad que facilite la mayor independencia posible, en condiciones de seguridad.')),
                ('dot_vajilla', models.BooleanField(default=False, help_text='Cuenta con vajilla, cubertería y comedor o comedores suficientes para atender al cincuenta por ciento (50%) de las personas adultas mayores usuarias, simultáneamente.')),
                ('ges_mis_vis', models.BooleanField(default=False, help_text='Cuenta con misión, visión y valores que le permitan definir sus principales líneas de desarrollo estratégico.')),
                ('ges_procesos', models.BooleanField(default=False, help_text='Cuenta con procesos misionales, estratégicos y de soporte, identificados e implementados.')),
                ('ges_procedimiento', models.BooleanField(default=False, help_text='Cuenta con procedimientos actualizados para llevar a cabo los procesos misionales.')),
                ('ges_proce_coordin', models.BooleanField(default=False, help_text='Cuenta con procedimiento de coordinación y articulación con el sistema de salud definido.')),
                ('ges_indicadores', models.BooleanField(default=False, help_text='Cuenta con indicadores de procesos misionales, estratégicos y de soporte cumplidos y mejorados.')),
                ('ges_sis_monitoreo', models.BooleanField(default=False, help_text='Cuenta con sistema de monitoreo para la mejora continua de los procesos.')),
                ('ges_reglamento', models.BooleanField(default=False, help_text='Cuenta con reglamento interno y manual de buen trato, elaborados con participación de las personas adultas mayores y sus redes de apoyo.')),
                ('ges_registro', models.BooleanField(default=False, help_text='Cuenta con historias de vida y planes de atención integral y centrada en las personas adultas mayores, cuya implementación se registra en bitácoras, debidamente archivados. ')),
                ('ges_estados_financieros', models.BooleanField(default=False, help_text='Cuenta con plan anual de ejecución del presupuesto del Centro.')),
                ('ges_objetivos', models.BooleanField(default=False, help_text='Cuenta con objetivos relacionados con la calidad de vida de las personas adultas mayores cumplidos y mejorados.')),
                ('ges_eval_clima', models.BooleanField(default=False, help_text='Cuenta con evaluación de clima laboral utilizada por la dirección como elemento de desarrollo organizativo del Centro de atencion. Cuenta con plan anual de ejecución del presupuesto .')),
                ('vippa_val_integral', models.BooleanField(default=False, help_text='Cuenta con valoración integral de la capacidad funcional de  cada persona adulta mayor al ingreso al Centro que establezca su condición nutriclonal, fisica, cognitiva, psicoafectiva, social y de historia de vida. ')),
                ('vippa_ai', models.BooleanField(default=False, help_text='Cuenta con un plan de atención integral para cada usuario de los servicios del Centro.')),
                ('vippa_eval_anual', models.BooleanField(default=False, help_text='Cuenta con valoración realizada mínimo cada año sobre la  capacidad funcional de los usuarios, para determinar cambios.')),
                ('vippa_eval_semestra', models.BooleanField(default=False, help_text='Cuenta con revisiones realizadas mínimo cada semestre a las bitácoras de los planes de atención integral, para determinar si existen signos o síntomas que deban ser reportados al sistema de salud. ')),
                ('vippa_pai_preferencias', models.BooleanField(default=False, help_text='Cuenta con bitácoras de registro de la ejecución, seguimiento y evaluación del plan de atención integral por cada servicio y usuario. ')),
                ('vippa_reg_socioecono', models.BooleanField(default=False, help_text='Cuenta con registro socioeconómico de cada una de las personas adultas mayores usuarias de la modalidad de cuidado.')),
                ('vippa_eval_mensual', models.BooleanField(default=False, help_text='Cuenta con evaluaciones mensuales para determinar si existen síntomas depresivos, fragilidad funcional o dolor que deba ser abordas con oportunidad.')),
                ('vippa_preferencias', models.BooleanField(default=False, help_text='Cuenta con identificación de preferencias, intereses, capacidades e historia de vida de cada una de las personas adultas mayores usuarias del centro de atencion ')),
                ('vippa_necesidad_apoyo', models.BooleanField(default=False, help_text='Cuenta con definición de necesidades de apoyo de las personas adultas mayores, valoración de recursos formales e informales disponibles y decisiones sobre factibilidad y priorización de intervenciones.')),
                ('vippa_registro_seguimiento', models.BooleanField(default=False, help_text='Cuenta con registro de la ejecución, seguimiento, evaluación y reprogramación del plan de atención integral y centrado en las personas adultas mayores.')),
                ('cv_recursos', models.BooleanField(default=False, help_text='Cuenta con recursos suficientes para estimular la independencia psíquica y funcional de las personas adultas mayores, la participación de las familias y la formación y cuidado del talento humano del centro vida.')),
                ('cv_eval', models.BooleanField(default=False, help_text='El centro de atencion  dispone y aplica un procedimiento de evaluación de la calidad de vida de cada persona adulta mayor usuaria.')),
                ('cv_resul_anuales', models.BooleanField(default=False, help_text='Cuenta con resultados anuales de encuestas de satisfacción o entrevistas cualitativas realizadas a las personas adultas mayores, familiares y amigos, y talento humano del Centro Vida, por personal diferente al que labora en el centro.')),
                ('habilitado', models.BooleanField(default=False, null=True)),
                ('obs_general', models.TextField(blank=True, null=True)),
                ('obv_th_director', models.TextField(blank=True, null=True)),
                ('obv_th_aux_enf', models.TextField(blank=True, null=True)),
                ('obv_th_cert_aten_inte', models.TextField(blank=True, null=True)),
                ('obv_th_cert_emergencia', models.TextField(blank=True, null=True)),
                ('obv_th_proc_indu_reind_th', models.TextField(blank=True, null=True)),
                ('obv_th_progr_cap_anual', models.TextField(blank=True, null=True)),
                ('obv_th_eval', models.TextField(blank=True, null=True)),
                ('obv_th_mante', models.TextField(blank=True, null=True)),
                ('obv_th_menus', models.TextField(blank=True, null=True)),
                ('obv_th_man_ali', models.TextField(blank=True, null=True)),
                ('obv_th_acti_esti', models.TextField(blank=True, null=True)),
                ('obv_th_acti_fisi', models.TextField(blank=True, null=True)),
                ('obv_th_acti_recre', models.TextField(blank=True, null=True)),
                ('obv_inf_ambi_limpios', models.TextField(blank=True, null=True)),
                ('obv_inf_ambi_solario', models.TextField(blank=True, null=True)),
                ('obv_inf_3_6_metros', models.TextField(blank=True, null=True)),
                ('obv_inf_cocina_area', models.TextField(blank=True, null=True)),
                ('obv_inf_servicio_gen', models.TextField(blank=True, null=True)),
                ('obv_inf_deambu', models.TextField(blank=True, null=True)),
                ('obv_inf_agua', models.TextField(blank=True, null=True)),
                ('obv_inf_infra_clima', models.TextField(blank=True, null=True)),
                ('obv_inf_pisos', models.TextField(blank=True, null=True)),
                ('obv_inf_unidad_sanitaria', models.TextField(blank=True, null=True)),
                ('obv_inf_bano', models.TextField(blank=True, null=True)),
                ('obv_inf_ascenso', models.TextField(blank=True, null=True)),
                ('obv_inf_rampas', models.TextField(blank=True, null=True)),
                ('obv_dot_dif_mov', models.TextField(blank=True, null=True)),
                ('obv_dot_estar_desca', models.TextField(blank=True, null=True)),
                ('obv_dot_primer_aux', models.TextField(blank=True, null=True)),
                ('obv_dot_bat_bano', models.TextField(blank=True, null=True)),
                ('obv_dot_agua', models.TextField(blank=True, null=True)),
                ('obv_dot_vajilla', models.TextField(blank=True, null=True)),
                ('obv_dot_comunicacion', models.TextField(blank=True, null=True)),
                ('obv_dot_basura', models.TextField(blank=True, null=True)),
                ('obv_dot_cronograma', models.TextField(blank=True, null=True)),
                ('obv_ges_mis_vis', models.TextField(blank=True, null=True)),
                ('obv_ges_procesos', models.TextField(blank=True, null=True)),
                ('obv_ges_procedimiento', models.TextField(blank=True, null=True)),
                ('obv_ges_proce_coordin', models.TextField(blank=True, null=True)),
                ('obv_ges_indicadores', models.TextField(blank=True, null=True)),
                ('obv_ges_sis_monitoreo', models.TextField(blank=True, null=True)),
                ('obv_ges_reglamento', models.TextField(blank=True, null=True)),
                ('obv_ges_registro', models.TextField(blank=True, null=True)),
                ('obv_ges_objetivos', models.TextField(blank=True, null=True)),
                ('obv_ges_eval_clima', models.TextField(blank=True, null=True)),
                ('obv_ges_estados_financieros', models.TextField(blank=True, null=True)),
                ('obv_vippa_reg_socioecono', models.TextField(blank=True, null=True)),
                ('obv_vippa_val_integral', models.TextField(blank=True, null=True)),
                ('obv_vippa_eval_mensual', models.TextField(blank=True, null=True)),
                ('obv_vippa_preferencias', models.TextField(blank=True, null=True)),
                ('obv_vippa_necesidad_apoyo', models.TextField(blank=True, null=True)),
                ('obv_cv_recursos', models.TextField(blank=True, null=True)),
                ('obv_cv_eval', models.TextField(blank=True, null=True)),
                ('obv_cv_resul_anuales', models.TextField(blank=True, null=True)),
                ('obv_inf_cocina_cv', models.TextField(blank=True, null=True)),
                ('obv_inf_ambiente', models.TextField(blank=True, null=True)),
                ('obv_inf_cocina', models.TextField(blank=True, null=True)),
                ('obv_inf_senal_emergencia', models.TextField(blank=True, null=True)),
                ('obv_dot_equipos', models.TextField(blank=True, null=True)),
                ('obv_vippa_eval_semestra', models.TextField(blank=True, null=True)),
                ('obv_vippa_registro_seguimiento', models.TextField(blank=True, null=True)),
                ('obv_vippa_pai_preferencias', models.TextField(blank=True, null=True)),
                ('obv_inf_ambi_iluminado', models.TextField(blank=True, null=True)),
                ('obv_inf_esp_acce', models.TextField(blank=True, null=True)),
                ('obs_th_dir_formacion', models.TextField(blank=True, null=True)),
                ('obs_th_aux_formacion', models.TextField(blank=True, null=True)),
                ('obs_inf_reso_previa', models.TextField(blank=True, null=True)),
                ('obs_dot_trabajo_grupo', models.TextField(blank=True, null=True)),
                ('obs_dot_residuos', models.TextField(blank=True, null=True)),
                ('obs_dot_cronograma', models.TextField(blank=True, null=True)),
                ('obs_vippa_ai', models.TextField(blank=True, null=True)),
                ('obs_vippa_eval_anual', models.TextField(blank=True, null=True)),
                ('sum_th', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=4, null=True)),
                ('sum_inf', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=4, null=True)),
                ('sum_dot', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=4, null=True)),
                ('sum_gest', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=4, null=True)),
                ('sum_eva', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=4, null=True)),
                ('sum_cv', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=4, null=True)),
                ('suma_total', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, null=True)),
                ('centro_proteccion', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='criterios', to='centros_proteccion.centroatencion')),
                ('estandarizacion', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='indi_dia_vida', to='centros_proteccion.estandarizacion')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CorreoElectronico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('correo', models.EmailField(max_length=254, unique=True)),
                ('centro_proteccion', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='correos', to='centros_proteccion.centroatencion')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='centroatencion',
            name='area',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='centros_proteccion.darea'),
        ),
        migrations.AddField(
            model_name='centroatencion',
            name='condicion',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='centros_proteccion.dcondicion'),
        ),
        migrations.AddField(
            model_name='centroatencion',
            name='modalidad',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='modalidad', to='centros_proteccion.dmodalidad', verbose_name='modalidad'),
        ),
        migrations.AddField(
            model_name='centroatencion',
            name='municipio',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='centros', to='centros_proteccion.municipio', verbose_name='municipio'),
        ),
        migrations.AddField(
            model_name='centroatencion',
            name='razon_social',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='centros_razon', to='centros_proteccion.razonsocial', verbose_name='razon social'),
        ),
        migrations.AddField(
            model_name='centroatencion',
            name='usuario_registro',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CentroAInstitucion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('actividad', models.TextField(blank=True, max_length=1000)),
                ('caracterizacion', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='instituciones', to='centros_proteccion.caracterizacion')),
                ('institucion', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='centros', to='centros_proteccion.dinstitucion')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Centro a institución',
                'verbose_name_plural': 'Centros a instituciones',
            },
        ),
        migrations.CreateModel(
            name='CaracterizacionSubsidio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('caracterizacion', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='caracterizacion_subsidio', to='centros_proteccion.caracterizacion')),
                ('subsidio', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='caracterizacion_subsidio', to='centros_proteccion.dsubsidio')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('ver_caracterizacion', 'Puede ver la caracterización'), ('modificar_caracterizacion', 'Puede modificar la caracterización'), ('crear_caracterizacion', 'Puede crear la caracterización'), ('eliminar_caracterizacion', 'Puede eliminar la caracterización')),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CaracterizacionLE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('caracterizacion', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='caracterizacion_le', to='centros_proteccion.caracterizacion')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CaracterizacionFinanciador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('caracterizacion', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='car_financiadores', to='centros_proteccion.caracterizacion')),
                ('financiador', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='car_financiadores', to='centros_proteccion.dfinanciamiento')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('ver_caracterizacion', 'Puede ver la caracterización'), ('modificar_caracterizacion', 'Puede modificar la caracterización'), ('crear_caracterizacion', 'Puede crear la caracterización'), ('eliminar_caracterizacion', 'Puede eliminar la caracterización')),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CaracterizacionEnfDif',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('caracterizacion', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='caracterizacion_enfoque_diferencial', to='centros_proteccion.caracterizacion')),
                ('enfoque', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='caracterizacion_enfoque_diferencial', to='centros_proteccion.denfoquediferencial')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('ver_caracterizacion', 'Puede ver la caracterización'), ('modificar_caracterizacion', 'Puede modificar la caracterización'), ('crear_caracterizacion', 'Puede crear la caracterización'), ('eliminar_caracterizacion', 'Puede eliminar la caracterización')),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CaracterizacionCV',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('cantidad_centros_municipio', models.IntegerField(blank=True, null=True)),
                ('cantidad_privados', models.IntegerField(blank=True, null=True)),
                ('cantidad_publicos', models.IntegerField(blank=True, null=True)),
                ('cantidad_urbanos', models.IntegerField(blank=True, null=True)),
                ('cantidad_rurales', models.IntegerField(blank=True, null=True)),
                ('dias_mes', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(31)])),
                ('dias_semana', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(7)])),
                ('cuenta_resolucion', models.BooleanField(default=False, help_text='El centro cuenta con resolución de habilitación', null=True)),
                ('resolucion', models.CharField(max_length=150, null=True)),
                ('visita_ivc', models.BooleanField(default=False, help_text='El centro ha sido visitado por el Inspección Vigilancia Control', null=True)),
                ('fecha_visita', models.DateField(blank=True, null=True)),
                ('beneficiario_estampilla', models.IntegerField(blank=True, help_text='Cuantas personas mayores son beneficiarias del recurso de estampilla en el centro.', null=True)),
                ('no_beneficiario_estampilla', models.IntegerField(blank=True, help_text='Cuantas personas mayores no son beneficiarias del recurso de estampilla en el centro.', null=True)),
                ('caracterizacion', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='caracterizacion_cv', to='centros_proteccion.caracterizacion')),
                ('concepto_previo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='centros_proteccion.dconceptosanitario')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Caracterización de centros de vida',
                'verbose_name_plural': 'Caracterización de centros de vida',
                'permissions': (('ver_caracterizacion_centro_vida', 'Puede ver la caracterización de centros de vida'), ('modificar_caracterizacion_centro_vida', 'Puede modificar la caracterización de centros de vida'), ('crear_caracterizacion_centro_vida', 'Puede crear la caracterización de centros de vida'), ('eliminar_caracterizacion_centro_vida', 'Puede eliminar la caracterización de centros de vida')),
            },
        ),
        migrations.AddField(
            model_name='caracterizacion',
            name='administrador',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='centros_administrados', to='centros_proteccion.dadministrador'),
        ),
        migrations.AddField(
            model_name='caracterizacion',
            name='centro_atencion',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='registros', to='centros_proteccion.centroatencion'),
        ),
        migrations.AddField(
            model_name='caracterizacion',
            name='concepto_sanitario',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='centros_proteccion.dconceptosanitario'),
        ),
        migrations.AddField(
            model_name='caracterizacion',
            name='exigencias',
            field=models.ManyToManyField(blank=True, related_name='centros', to='centros_proteccion.dexigencias'),
        ),
        migrations.AddField(
            model_name='caracterizacion',
            name='servicios',
            field=models.ManyToManyField(blank=True, to='centros_proteccion.dservicios'),
        ),
        migrations.AddField(
            model_name='caracterizacion',
            name='usuario_registro',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CaracExigeOtras',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('exigencia', models.CharField(max_length=100)),
                ('caracterizacion', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='otras_exigencias', to='centros_proteccion.caracterizacion')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ActividadesFamiliaresLE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(null=True)),
                ('actividad_familiar', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='actividades_familiares', to='centros_proteccion.dactividadesfamiliares')),
                ('caracterizacioncv', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='actividades_familiares', to='centros_proteccion.caracterizacion')),
                ('usuario_registro', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='representantelegal',
            constraint=models.UniqueConstraint(fields=('cedula',), name='cédula única'),
        ),
        migrations.AddConstraint(
            model_name='razonsocial',
            constraint=models.UniqueConstraint(fields=('nit',), name='nit_unique_constrain'),
        ),
        migrations.AddConstraint(
            model_name='estandarizacion',
            constraint=models.UniqueConstraint(fields=('max_value',), name='Los valores tiene que ser únicos.'),
        ),
        migrations.AddConstraint(
            model_name='estandarizacion',
            constraint=models.UniqueConstraint(fields=('semaforo',), name='El valor del semáforo tiene que ser único.'),
        ),
        migrations.AddConstraint(
            model_name='estandarizacion',
            constraint=models.UniqueConstraint(fields=('nivel_riesgo',), name='El nivel de riesgo tiene que ser único.'),
        ),
    ]
